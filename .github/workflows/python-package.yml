# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, '3.10']
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      if: matrix.os != 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install rich orjson
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    - name: Install dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        if (Test-Path -Path '.\requirements-dev.txt' -PathType Leaf) {pip install -r requirements-dev.txt}
    - name: Build dist and test with unittest
      if: matrix.os != 'windows-latest'
      run: |
        python setup.py sdist bdist_wheel
        pip install dist/*.whl
        python -m unittest
    - name: Build dist and test with unittest on Windows
      if: matrix.os == 'windows-latest'
      run: |
        python setup.py sdist bdist_wheel
        pip install (Get-ChildItem dist/*.whl)
        python -m unittest
    - name: Generate coverage report
      run: |
        coverage run --source viztracer --parallel-mode -m unittest
        coverage combine
        coverage xml -i
      env:
        COVERAGE_RUN: True
    - name: Upload report to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml

  Build-aarch64:
    name: "Build and test ${{ matrix.pyver }} aarch64 wheel"
    strategy:
      matrix:
        pyver: [ '3.6', '3.7', '3.8', '3.9' ]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: python${{ matrix.pyver }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Build Wheel
      run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            arm64v8/ubuntu \
            bash -exc 'apt-get update && \
            apt install software-properties-common -y && \
            add-apt-repository ppa:deadsnakes/ppa -y && \
            apt install -y ${{ env.py }} && \
            apt install -y ${{ env.py }}-venv && \
            ${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            python --version && \
            pip install --upgrade pip && \
            pip install rich orjson && \
            uname -m && \
            pip install -r requirements-dev.txt && \
            python setup.py bdist_wheel && \
            pip install dist/*.whl && \
            python -m unittest && \
            deactivate'
